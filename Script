--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 117 | Scripts: 20 | Modules: 2 | Tags: 0
local G2L = {};

-- StarterGui.ScreenGui
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;


-- StarterGui.ScreenGui.MainFrame
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["BorderSizePixel"] = 0;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2"]["Size"] = UDim2.new(0, 811, 0, 443);
G2L["2"]["Position"] = UDim2.new(0.25809, 0, 0.15098, 0);
G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2"]["Name"] = [[MainFrame]];


-- StarterGui.ScreenGui.MainFrame.UICorner
G2L["3"] = Instance.new("UICorner", G2L["2"]);



-- StarterGui.ScreenGui.MainFrame.Title
G2L["4"] = Instance.new("TextLabel", G2L["2"]);
G2L["4"]["TextWrapped"] = true;
G2L["4"]["BorderSizePixel"] = 0;
G2L["4"]["TextSize"] = 14;
G2L["4"]["TextScaled"] = true;
G2L["4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4"]["BackgroundTransparency"] = 1;
G2L["4"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4"]["Text"] = [[Void Hub]];
G2L["4"]["Name"] = [[Title]];
G2L["4"]["Position"] = UDim2.new(0.39084, 0, 0, 0);


-- StarterGui.ScreenGui.MainFrame.DragScript
G2L["5"] = Instance.new("LocalScript", G2L["2"]);
G2L["5"]["Name"] = [[DragScript]];


-- StarterGui.ScreenGui.MainFrame.Minimize
G2L["6"] = Instance.new("TextButton", G2L["2"]);
G2L["6"]["TextWrapped"] = true;
G2L["6"]["BorderSizePixel"] = 0;
G2L["6"]["TextSize"] = 14;
G2L["6"]["TextScaled"] = true;
G2L["6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["6"]["BackgroundTransparency"] = 1;
G2L["6"]["Size"] = UDim2.new(0, 50, 0, 48);
G2L["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6"]["Text"] = [[_]];
G2L["6"]["Name"] = [[Minimize]];
G2L["6"]["Position"] = UDim2.new(0.93814, 0, -0.03612, -8);


-- StarterGui.ScreenGui.MainFrame.Minimize.LocalScript
G2L["7"] = Instance.new("LocalScript", G2L["6"]);



-- StarterGui.ScreenGui.MainFrame.Minimize.LocalScript.notification
G2L["8"] = Instance.new("Sound", G2L["7"]);
G2L["8"]["Volume"] = 10;
G2L["8"]["Name"] = [[notification]];
G2L["8"]["SoundId"] = [[rbxassetid://4590662766]];


-- StarterGui.ScreenGui.MainFrame.RightCtrlToOpenUI
G2L["9"] = Instance.new("LocalScript", G2L["2"]);
G2L["9"]["Name"] = [[RightCtrlToOpenUI]];


-- StarterGui.ScreenGui.MainFrame.MainTabButton
G2L["a"] = Instance.new("TextButton", G2L["2"]);
G2L["a"]["TextWrapped"] = true;
G2L["a"]["BorderSizePixel"] = 0;
G2L["a"]["TextSize"] = 14;
G2L["a"]["TextScaled"] = true;
G2L["a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a"]["FontFace"] = Font.new([[rbxasset://fonts/families/ComicNeueAngular.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a"]["Size"] = UDim2.new(0, 114, 0, 39);
G2L["a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a"]["Text"] = [[Main]];
G2L["a"]["Name"] = [[MainTabButton]];
G2L["a"]["Position"] = UDim2.new(0.01187, 0, 0.30231, 0);


-- StarterGui.ScreenGui.MainFrame.MainTabButton.UICorner
G2L["b"] = Instance.new("UICorner", G2L["a"]);



-- StarterGui.ScreenGui.MainFrame.MainTabButton.LocalScript
G2L["c"] = Instance.new("LocalScript", G2L["a"]);



-- StarterGui.ScreenGui.MainFrame.MainTabButton.UIStroke
G2L["d"] = Instance.new("UIStroke", G2L["a"]);
G2L["d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["d"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.MainTab
G2L["e"] = Instance.new("Frame", G2L["2"]);
G2L["e"]["Visible"] = false;
G2L["e"]["BorderSizePixel"] = 0;
G2L["e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e"]["Size"] = UDim2.new(0, 668, 0, 377);
G2L["e"]["Position"] = UDim2.new(0.16312, 0, 0.1341, 0);
G2L["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e"]["Name"] = [[MainTab]];


-- StarterGui.ScreenGui.MainFrame.MainTab.UICorner
G2L["f"] = Instance.new("UICorner", G2L["e"]);



-- StarterGui.ScreenGui.MainFrame.MainTab.UIStroke
G2L["10"] = Instance.new("UIStroke", G2L["e"]);
G2L["10"]["Thickness"] = 0.75;
G2L["10"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.MainTab.Title
G2L["11"] = Instance.new("TextLabel", G2L["e"]);
G2L["11"]["TextWrapped"] = true;
G2L["11"]["BorderSizePixel"] = 0;
G2L["11"]["TextSize"] = 14;
G2L["11"]["TextScaled"] = true;
G2L["11"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["11"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11"]["BackgroundTransparency"] = 1;
G2L["11"]["Size"] = UDim2.new(0, 200, 0, 43);
G2L["11"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["Text"] = [[Main Tab]];
G2L["11"]["Name"] = [[Title]];
G2L["11"]["Position"] = UDim2.new(0.37913, 0, -0.00173, 0);


-- StarterGui.ScreenGui.MainFrame.MainTab.Aimbot
G2L["12"] = Instance.new("TextButton", G2L["e"]);
G2L["12"]["TextWrapped"] = true;
G2L["12"]["BorderSizePixel"] = 0;
G2L["12"]["TextSize"] = 14;
G2L["12"]["TextScaled"] = true;
G2L["12"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["12"]["BackgroundTransparency"] = 0.8;
G2L["12"]["Size"] = UDim2.new(0, 186, 0, 46);
G2L["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12"]["Text"] = [[Aimbot OFF]];
G2L["12"]["Name"] = [[Aimbot]];
G2L["12"]["Position"] = UDim2.new(0.03547, 0, 0.19757, 0);


-- StarterGui.ScreenGui.MainFrame.MainTab.Aimbot.UIStroke
G2L["13"] = Instance.new("UIStroke", G2L["12"]);
G2L["13"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["13"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.MainTab.Aimbot.UICorner
G2L["14"] = Instance.new("UICorner", G2L["12"]);



-- StarterGui.ScreenGui.MainFrame.MainTab.Aimbot.LocalScript
G2L["15"] = Instance.new("LocalScript", G2L["12"]);



-- StarterGui.ScreenGui.MainFrame.MainTab.Aimbot.TextLabel
G2L["16"] = Instance.new("TextLabel", G2L["12"]);
G2L["16"]["TextWrapped"] = true;
G2L["16"]["BorderSizePixel"] = 0;
G2L["16"]["TextSize"] = 14;
G2L["16"]["TextScaled"] = true;
G2L["16"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16"]["BackgroundTransparency"] = 1;
G2L["16"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["16"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16"]["Text"] = [[E to toggle aimbot]];
G2L["16"]["Position"] = UDim2.new(-0.03763, 0, -1.08696, 0);


-- StarterGui.ScreenGui.MainFrame.MainTab.Aimbot.AimbotModule
G2L["17"] = Instance.new("ModuleScript", G2L["12"]);
G2L["17"]["Name"] = [[AimbotModule]];


-- StarterGui.ScreenGui.MainFrame.MainTab.TriggerBot
G2L["18"] = Instance.new("TextButton", G2L["e"]);
G2L["18"]["TextWrapped"] = true;
G2L["18"]["BorderSizePixel"] = 0;
G2L["18"]["TextSize"] = 14;
G2L["18"]["TextScaled"] = true;
G2L["18"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18"]["BackgroundTransparency"] = 0.8;
G2L["18"]["Size"] = UDim2.new(0, 186, 0, 46);
G2L["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["Text"] = [[TriggerBot]];
G2L["18"]["Name"] = [[TriggerBot]];
G2L["18"]["Position"] = UDim2.new(0.03547, 0, 0.33285, 0);


-- StarterGui.ScreenGui.MainFrame.MainTab.TriggerBot.UIStroke
G2L["19"] = Instance.new("UIStroke", G2L["18"]);
G2L["19"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["19"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.MainTab.TriggerBot.UICorner
G2L["1a"] = Instance.new("UICorner", G2L["18"]);



-- StarterGui.ScreenGui.MainFrame.MainTab.TriggerBot.LocalScript
G2L["1b"] = Instance.new("LocalScript", G2L["18"]);



-- StarterGui.ScreenGui.MainFrame.MainTab.SpinBot
G2L["1c"] = Instance.new("TextButton", G2L["e"]);
G2L["1c"]["TextWrapped"] = true;
G2L["1c"]["BorderSizePixel"] = 0;
G2L["1c"]["TextSize"] = 14;
G2L["1c"]["TextScaled"] = true;
G2L["1c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c"]["BackgroundTransparency"] = 0.8;
G2L["1c"]["Size"] = UDim2.new(0, 186, 0, 46);
G2L["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c"]["Text"] = [[SpinBot]];
G2L["1c"]["Name"] = [[SpinBot]];
G2L["1c"]["Position"] = UDim2.new(0.03547, 0, 0.47609, 0);


-- StarterGui.ScreenGui.MainFrame.MainTab.SpinBot.UIStroke
G2L["1d"] = Instance.new("UIStroke", G2L["1c"]);
G2L["1d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["1d"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.MainTab.SpinBot.UICorner
G2L["1e"] = Instance.new("UICorner", G2L["1c"]);



-- StarterGui.ScreenGui.MainFrame.MainTab.SpinBot.LocalScript
G2L["1f"] = Instance.new("LocalScript", G2L["1c"]);



-- StarterGui.ScreenGui.MainFrame.MainTab.Bhop
G2L["20"] = Instance.new("TextButton", G2L["e"]);
G2L["20"]["TextWrapped"] = true;
G2L["20"]["BorderSizePixel"] = 0;
G2L["20"]["TextSize"] = 14;
G2L["20"]["TextScaled"] = true;
G2L["20"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["20"]["BackgroundTransparency"] = 0.8;
G2L["20"]["Size"] = UDim2.new(0, 186, 0, 46);
G2L["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20"]["Text"] = [[Bhop]];
G2L["20"]["Name"] = [[Bhop]];
G2L["20"]["Position"] = UDim2.new(0.03547, 0, 0.61402, 0);


-- StarterGui.ScreenGui.MainFrame.MainTab.Bhop.UIStroke
G2L["21"] = Instance.new("UIStroke", G2L["20"]);
G2L["21"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["21"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.MainTab.Bhop.UICorner
G2L["22"] = Instance.new("UICorner", G2L["20"]);



-- StarterGui.ScreenGui.MainFrame.MainTab.Bhop.LocalScript
G2L["23"] = Instance.new("LocalScript", G2L["20"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab
G2L["24"] = Instance.new("Frame", G2L["2"]);
G2L["24"]["Visible"] = false;
G2L["24"]["BorderSizePixel"] = 0;
G2L["24"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24"]["Size"] = UDim2.new(0, 671, 0, 374);
G2L["24"]["Position"] = UDim2.new(0.1603, 0, 0.13817, 0);
G2L["24"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24"]["Name"] = [[PlayerTab]];
G2L["24"]["BackgroundTransparency"] = 1;


-- StarterGui.ScreenGui.MainFrame.PlayerTab.UICorner
G2L["25"] = Instance.new("UICorner", G2L["24"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.UIStroke
G2L["26"] = Instance.new("UIStroke", G2L["24"]);
G2L["26"]["Thickness"] = 0.75;
G2L["26"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.Title
G2L["27"] = Instance.new("TextLabel", G2L["24"]);
G2L["27"]["TextWrapped"] = true;
G2L["27"]["BorderSizePixel"] = 0;
G2L["27"]["TextSize"] = 14;
G2L["27"]["TextScaled"] = true;
G2L["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["27"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27"]["BackgroundTransparency"] = 1;
G2L["27"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27"]["Text"] = [[Player Tab]];
G2L["27"]["Name"] = [[Title]];
G2L["27"]["Position"] = UDim2.new(0.34776, 0, -0.00481, 0);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.Infinite Jump
G2L["28"] = Instance.new("TextButton", G2L["24"]);
G2L["28"]["TextWrapped"] = true;
G2L["28"]["BorderSizePixel"] = 0;
G2L["28"]["TextSize"] = 14;
G2L["28"]["TextScaled"] = true;
G2L["28"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["28"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["28"]["BackgroundTransparency"] = 0.8;
G2L["28"]["Size"] = UDim2.new(0, 126, 0, 46);
G2L["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28"]["Text"] = [[Infinite Jump]];
G2L["28"]["Name"] = [[Infinite Jump]];
G2L["28"]["Position"] = UDim2.new(0.00329, 0, 0.0064, 0);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.Infinite Jump.UIStroke
G2L["29"] = Instance.new("UIStroke", G2L["28"]);
G2L["29"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["29"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.Infinite Jump.UICorner
G2L["2a"] = Instance.new("UICorner", G2L["28"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.Infinite Jump.LocalScript
G2L["2b"] = Instance.new("LocalScript", G2L["28"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.Fly
G2L["2c"] = Instance.new("TextButton", G2L["24"]);
G2L["2c"]["TextWrapped"] = true;
G2L["2c"]["BorderSizePixel"] = 0;
G2L["2c"]["TextSize"] = 14;
G2L["2c"]["TextScaled"] = true;
G2L["2c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2c"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2c"]["BackgroundTransparency"] = 0.8;
G2L["2c"]["Size"] = UDim2.new(0, 125, 0, 46);
G2L["2c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2c"]["Text"] = [[Fly]];
G2L["2c"]["Name"] = [[Fly]];
G2L["2c"]["Position"] = UDim2.new(0.00228, 0, 0.31183, 0);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.Fly.UIStroke
G2L["2d"] = Instance.new("UIStroke", G2L["2c"]);
G2L["2d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["2d"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.Fly.UICorner
G2L["2e"] = Instance.new("UICorner", G2L["2c"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.Fly.LocalScript
G2L["2f"] = Instance.new("LocalScript", G2L["2c"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.NoClip
G2L["30"] = Instance.new("TextButton", G2L["24"]);
G2L["30"]["TextWrapped"] = true;
G2L["30"]["BorderSizePixel"] = 0;
G2L["30"]["TextSize"] = 14;
G2L["30"]["TextScaled"] = true;
G2L["30"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["30"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["30"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["30"]["BackgroundTransparency"] = 0.8;
G2L["30"]["Size"] = UDim2.new(0, 125, 0, 46);
G2L["30"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["30"]["Text"] = [[NoClip]];
G2L["30"]["Name"] = [[NoClip]];
G2L["30"]["Position"] = UDim2.new(0.00322, 0, 0.15747, 0);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.NoClip.UIStroke
G2L["31"] = Instance.new("UIStroke", G2L["30"]);
G2L["31"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["31"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.NoClip.UICorner
G2L["32"] = Instance.new("UICorner", G2L["30"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.NoClip.LocalScript
G2L["33"] = Instance.new("LocalScript", G2L["30"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame
G2L["34"] = Instance.new("Frame", G2L["24"]);
G2L["34"]["BorderSizePixel"] = 0;
G2L["34"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34"]["Size"] = UDim2.new(0, 213, 0, 246);
G2L["34"]["Position"] = UDim2.new(0.87329, -129, 0, 0);
G2L["34"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["34"]["Name"] = [[TeleportFrame]];
G2L["34"]["BackgroundTransparency"] = 1;


-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.UICorner
G2L["35"] = Instance.new("UICorner", G2L["34"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.UIStroke
G2L["36"] = Instance.new("UIStroke", G2L["34"]);
G2L["36"]["Thickness"] = 0.75;
G2L["36"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.PlayerList
G2L["37"] = Instance.new("ScrollingFrame", G2L["34"]);
G2L["37"]["Active"] = true;
G2L["37"]["BorderSizePixel"] = 0;
G2L["37"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37"]["Name"] = [[PlayerList]];
G2L["37"]["Size"] = UDim2.new(0, 215, 0, 212);
G2L["37"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["37"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["37"]["BackgroundTransparency"] = 1;


-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.PlayerList.UICorner
G2L["38"] = Instance.new("UICorner", G2L["37"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.PlayerList.TemplateButton
G2L["39"] = Instance.new("TextButton", G2L["37"]);
G2L["39"]["TextWrapped"] = true;
G2L["39"]["BorderSizePixel"] = 0;
G2L["39"]["TextSize"] = 14;
G2L["39"]["TextScaled"] = true;
G2L["39"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["39"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["39"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["39"]["Size"] = UDim2.new(0, 215, 0, 50);
G2L["39"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["39"]["Name"] = [[TemplateButton]];
G2L["39"]["Visible"] = false;
G2L["39"]["Position"] = UDim2.new(0, 0, 0.88926, 0);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.PlayerList.TemplateButton.UICorner
G2L["3a"] = Instance.new("UICorner", G2L["39"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.PlayerList.UIListLayout
G2L["3b"] = Instance.new("UIListLayout", G2L["37"]);
G2L["3b"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.TeleportButton
G2L["3c"] = Instance.new("TextButton", G2L["34"]);
G2L["3c"]["TextWrapped"] = true;
G2L["3c"]["BorderSizePixel"] = 0;
G2L["3c"]["TextSize"] = 14;
G2L["3c"]["TextScaled"] = true;
G2L["3c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3c"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3c"]["BackgroundTransparency"] = 1;
G2L["3c"]["Size"] = UDim2.new(0, 215, 0, 34);
G2L["3c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3c"]["Text"] = [[Teleport]];
G2L["3c"]["Name"] = [[TeleportButton]];
G2L["3c"]["Position"] = UDim2.new(0, 0, 0.86368, 0);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.TeleportButton.UICorner
G2L["3d"] = Instance.new("UICorner", G2L["3c"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.TeleportButton.UIStroke
G2L["3e"] = Instance.new("UIStroke", G2L["3c"]);
G2L["3e"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["3e"]["Thickness"] = 0.75;
G2L["3e"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.LocalScript
G2L["3f"] = Instance.new("LocalScript", G2L["34"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame
G2L["40"] = Instance.new("Frame", G2L["24"]);
G2L["40"]["BorderSizePixel"] = 0;
G2L["40"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["40"]["Size"] = UDim2.new(0, 144, 0, 123);
G2L["40"]["Position"] = UDim2.new(0.221, -146, 0.855, -73);
G2L["40"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["40"]["Name"] = [[WalkSpeedFrame]];
G2L["40"]["BackgroundTransparency"] = 1;


-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.UICorner
G2L["41"] = Instance.new("UICorner", G2L["40"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.UIListLayout
G2L["42"] = Instance.new("UIListLayout", G2L["40"]);
G2L["42"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.UIStroke
G2L["43"] = Instance.new("UIStroke", G2L["40"]);
G2L["43"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.TextLabel2
G2L["44"] = Instance.new("TextLabel", G2L["40"]);
G2L["44"]["TextWrapped"] = true;
G2L["44"]["BorderSizePixel"] = 0;
G2L["44"]["TextSize"] = 14;
G2L["44"]["TextScaled"] = true;
G2L["44"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["44"]["FontFace"] = Font.new([[rbxasset://fonts/families/JosefinSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["44"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["44"]["BackgroundTransparency"] = 1;
G2L["44"]["Size"] = UDim2.new(0, 141, 0, 38);
G2L["44"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["44"]["Text"] = [[WalkSpeed: 16]];
G2L["44"]["Name"] = [[TextLabel2]];
G2L["44"]["Position"] = UDim2.new(0.06944, 0, 0.04065, 0);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.TextBox
G2L["45"] = Instance.new("TextBox", G2L["40"]);
G2L["45"]["BorderSizePixel"] = 0;
G2L["45"]["TextWrapped"] = true;
G2L["45"]["TextSize"] = 14;
G2L["45"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["45"]["TextScaled"] = true;
G2L["45"]["BackgroundColor3"] = Color3.fromRGB(116, 116, 116);
G2L["45"]["RichText"] = true;
G2L["45"]["FontFace"] = Font.new([[rbxasset://fonts/families/JosefinSans.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["45"]["PlaceholderText"] = [[-- Type ur desired Walkspeed here]];
G2L["45"]["Size"] = UDim2.new(0, 141, 0, 45);
G2L["45"]["Position"] = UDim2.new(0, 0, 0.70588, 0);
G2L["45"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["45"]["Text"] = [[]];


-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.TextBox.UICorner
G2L["46"] = Instance.new("UICorner", G2L["45"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.TextBox.UIStroke
G2L["47"] = Instance.new("UIStroke", G2L["45"]);
G2L["47"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["47"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.TextBox.LocalScript
G2L["48"] = Instance.new("LocalScript", G2L["45"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTab
G2L["49"] = Instance.new("Frame", G2L["2"]);
G2L["49"]["Visible"] = false;
G2L["49"]["BorderSizePixel"] = 0;
G2L["49"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["49"]["Size"] = UDim2.new(0, 669, 0, 373);
G2L["49"]["Position"] = UDim2.new(0.16153, 0, 0.13999, 0);
G2L["49"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["49"]["Name"] = [[VisualsTab]];


-- StarterGui.ScreenGui.MainFrame.VisualsTab.UIStroke
G2L["4a"] = Instance.new("UIStroke", G2L["49"]);
G2L["4a"]["Thickness"] = 0.75;
G2L["4a"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.VisualsTab.UICorner
G2L["4b"] = Instance.new("UICorner", G2L["49"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTab.Title
G2L["4c"] = Instance.new("TextLabel", G2L["49"]);
G2L["4c"]["TextWrapped"] = true;
G2L["4c"]["BorderSizePixel"] = 0;
G2L["4c"]["TextSize"] = 14;
G2L["4c"]["TextScaled"] = true;
G2L["4c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["4c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4c"]["BackgroundTransparency"] = 1;
G2L["4c"]["Size"] = UDim2.new(0, 200, 0, 43);
G2L["4c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4c"]["Text"] = [[Visuals Tab]];
G2L["4c"]["Name"] = [[Title]];
G2L["4c"]["Position"] = UDim2.new(0.38944, 0, 0, 0);


-- StarterGui.ScreenGui.MainFrame.VisualsTab.Esp
G2L["4d"] = Instance.new("TextButton", G2L["49"]);
G2L["4d"]["TextWrapped"] = true;
G2L["4d"]["BorderSizePixel"] = 0;
G2L["4d"]["TextSize"] = 14;
G2L["4d"]["TextScaled"] = true;
G2L["4d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4d"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4d"]["BackgroundTransparency"] = 0.8;
G2L["4d"]["Size"] = UDim2.new(0, 186, 0, 46);
G2L["4d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4d"]["Text"] = [[Esp]];
G2L["4d"]["Name"] = [[Esp]];
G2L["4d"]["Position"] = UDim2.new(0.68724, 0, 0.8246, 0);


-- StarterGui.ScreenGui.MainFrame.VisualsTab.Esp.UIStroke
G2L["4e"] = Instance.new("UIStroke", G2L["4d"]);
G2L["4e"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["4e"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.VisualsTab.Esp.UICorner
G2L["4f"] = Instance.new("UICorner", G2L["4d"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTab.Esp.LocalScript
G2L["50"] = Instance.new("LocalScript", G2L["4d"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTab.Esp.ESPModule
G2L["51"] = Instance.new("ModuleScript", G2L["4d"]);
G2L["51"]["Name"] = [[ESPModule]];


-- StarterGui.ScreenGui.MainFrame.VisualsTab.Tracers
G2L["52"] = Instance.new("TextButton", G2L["49"]);
G2L["52"]["TextWrapped"] = true;
G2L["52"]["BorderSizePixel"] = 0;
G2L["52"]["TextSize"] = 14;
G2L["52"]["TextScaled"] = true;
G2L["52"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["52"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["52"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["52"]["BackgroundTransparency"] = 0.8;
G2L["52"]["Size"] = UDim2.new(0, 186, 0, 46);
G2L["52"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["52"]["Text"] = [[Tracers]];
G2L["52"]["Name"] = [[Tracers]];
G2L["52"]["Position"] = UDim2.new(0.38895, 0, 0.82608, 0);


-- StarterGui.ScreenGui.MainFrame.VisualsTab.Tracers.UIStroke
G2L["53"] = Instance.new("UIStroke", G2L["52"]);
G2L["53"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["53"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.VisualsTab.Tracers.UICorner
G2L["54"] = Instance.new("UICorner", G2L["52"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTab.Tracers.LocalScript
G2L["55"] = Instance.new("LocalScript", G2L["52"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTab.Chams
G2L["56"] = Instance.new("TextButton", G2L["49"]);
G2L["56"]["TextWrapped"] = true;
G2L["56"]["BorderSizePixel"] = 0;
G2L["56"]["TextSize"] = 14;
G2L["56"]["TextScaled"] = true;
G2L["56"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["56"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["56"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["56"]["BackgroundTransparency"] = 0.8;
G2L["56"]["Size"] = UDim2.new(0, 186, 0, 46);
G2L["56"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["56"]["Text"] = [[Chams]];
G2L["56"]["Name"] = [[Chams]];
G2L["56"]["Position"] = UDim2.new(0.0707, 0, 0.82608, 0);


-- StarterGui.ScreenGui.MainFrame.VisualsTab.Chams.UIStroke
G2L["57"] = Instance.new("UIStroke", G2L["56"]);
G2L["57"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["57"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.VisualsTab.Chams.UICorner
G2L["58"] = Instance.new("UICorner", G2L["56"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTab.Chams.LocalScript
G2L["59"] = Instance.new("LocalScript", G2L["56"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTabButton
G2L["5a"] = Instance.new("TextButton", G2L["2"]);
G2L["5a"]["TextWrapped"] = true;
G2L["5a"]["BorderSizePixel"] = 0;
G2L["5a"]["TextSize"] = 14;
G2L["5a"]["TextScaled"] = true;
G2L["5a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5a"]["FontFace"] = Font.new([[rbxasset://fonts/families/ComicNeueAngular.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5a"]["Size"] = UDim2.new(0, 114, 0, 39);
G2L["5a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5a"]["Text"] = [[Player]];
G2L["5a"]["Name"] = [[PlayerTabButton]];
G2L["5a"]["Position"] = UDim2.new(0.01148, 0, 0.41743, 0);


-- StarterGui.ScreenGui.MainFrame.PlayerTabButton.UICorner
G2L["5b"] = Instance.new("UICorner", G2L["5a"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTabButton.LocalScript
G2L["5c"] = Instance.new("LocalScript", G2L["5a"]);



-- StarterGui.ScreenGui.MainFrame.PlayerTabButton.UIStroke
G2L["5d"] = Instance.new("UIStroke", G2L["5a"]);
G2L["5d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["5d"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.VisualsTabButton
G2L["5e"] = Instance.new("TextButton", G2L["2"]);
G2L["5e"]["TextWrapped"] = true;
G2L["5e"]["BorderSizePixel"] = 0;
G2L["5e"]["TextSize"] = 14;
G2L["5e"]["TextScaled"] = true;
G2L["5e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5e"]["FontFace"] = Font.new([[rbxasset://fonts/families/ComicNeueAngular.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5e"]["Size"] = UDim2.new(0, 114, 0, 39);
G2L["5e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5e"]["Text"] = [[Visuals]];
G2L["5e"]["Name"] = [[VisualsTabButton]];
G2L["5e"]["Position"] = UDim2.new(0.01095, 0, 0.62736, 0);


-- StarterGui.ScreenGui.MainFrame.VisualsTabButton.UICorner
G2L["5f"] = Instance.new("UICorner", G2L["5e"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTabButton.LocalScript
G2L["60"] = Instance.new("LocalScript", G2L["5e"]);



-- StarterGui.ScreenGui.MainFrame.VisualsTabButton.UIStroke
G2L["61"] = Instance.new("UIStroke", G2L["5e"]);
G2L["61"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["61"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.SettingsTabButton
G2L["62"] = Instance.new("TextButton", G2L["2"]);
G2L["62"]["TextWrapped"] = true;
G2L["62"]["BorderSizePixel"] = 0;
G2L["62"]["TextSize"] = 14;
G2L["62"]["TextScaled"] = true;
G2L["62"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["62"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["62"]["FontFace"] = Font.new([[rbxasset://fonts/families/ComicNeueAngular.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["62"]["Size"] = UDim2.new(0, 114, 0, 39);
G2L["62"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["62"]["Text"] = [[Settings]];
G2L["62"]["Name"] = [[SettingsTabButton]];
G2L["62"]["Position"] = UDim2.new(0.01148, 0, 0.51901, 0);


-- StarterGui.ScreenGui.MainFrame.SettingsTabButton.UICorner
G2L["63"] = Instance.new("UICorner", G2L["62"]);



-- StarterGui.ScreenGui.MainFrame.SettingsTabButton.LocalScript
G2L["64"] = Instance.new("LocalScript", G2L["62"]);



-- StarterGui.ScreenGui.MainFrame.SettingsTabButton.UIStroke
G2L["65"] = Instance.new("UIStroke", G2L["62"]);
G2L["65"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["65"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.SettingsTab
G2L["66"] = Instance.new("Frame", G2L["2"]);
G2L["66"]["Visible"] = false;
G2L["66"]["BorderSizePixel"] = 0;
G2L["66"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["66"]["Size"] = UDim2.new(0, 671, 0, 379);
G2L["66"]["Position"] = UDim2.new(0.1603, 0, 0.13096, 0);
G2L["66"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["66"]["Name"] = [[SettingsTab]];


-- StarterGui.ScreenGui.MainFrame.SettingsTab.UIStroke
G2L["67"] = Instance.new("UIStroke", G2L["66"]);
G2L["67"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.SettingsTab.UICorner
G2L["68"] = Instance.new("UICorner", G2L["66"]);



-- StarterGui.ScreenGui.MainFrame.SettingsTab.Theme
G2L["69"] = Instance.new("TextButton", G2L["66"]);
G2L["69"]["TextWrapped"] = true;
G2L["69"]["BorderSizePixel"] = 0;
G2L["69"]["TextSize"] = 14;
G2L["69"]["TextScaled"] = true;
G2L["69"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["69"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["69"]["FontFace"] = Font.new([[rbxasset://fonts/families/HighwayGothic.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["69"]["BackgroundTransparency"] = 0.8;
G2L["69"]["Size"] = UDim2.new(0, 186, 0, 46);
G2L["69"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["69"]["Text"] = [[Theme]];
G2L["69"]["Name"] = [[Theme]];
G2L["69"]["Position"] = UDim2.new(0.02041, 0, 0.84667, 0);


-- StarterGui.ScreenGui.MainFrame.SettingsTab.Theme.UIStroke
G2L["6a"] = Instance.new("UIStroke", G2L["69"]);
G2L["6a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["6a"]["Color"] = Color3.fromRGB(255, 255, 255);


-- StarterGui.ScreenGui.MainFrame.SettingsTab.Theme.UICorner
G2L["6b"] = Instance.new("UICorner", G2L["69"]);



-- StarterGui.ScreenGui.MainFrame.SettingsTab.Theme.LocalScript
G2L["6c"] = Instance.new("LocalScript", G2L["69"]);



-- StarterGui.ScreenGui.MainFrame.SettingsTab.Title
G2L["6d"] = Instance.new("TextLabel", G2L["66"]);
G2L["6d"]["TextWrapped"] = true;
G2L["6d"]["BorderSizePixel"] = 0;
G2L["6d"]["TextSize"] = 14;
G2L["6d"]["TextScaled"] = true;
G2L["6d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6d"]["FontFace"] = Font.new([[rbxasset://fonts/families/JosefinSans.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["6d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6d"]["BackgroundTransparency"] = 1;
G2L["6d"]["RichText"] = true;
G2L["6d"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["6d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6d"]["Text"] = [[⚙️Settings]];
G2L["6d"]["Name"] = [[Title]];
G2L["6d"]["Position"] = UDim2.new(0.36364, 0, -0.01055, 0);


-- StarterGui.ScreenGui.MainFrame.Icon
G2L["6e"] = Instance.new("ImageLabel", G2L["2"]);
G2L["6e"]["BorderSizePixel"] = 0;
G2L["6e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
-- [ERROR] cannot convert ImageContent, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["6e"]["Image"] = [[rbxassetid://118684271754409]];
G2L["6e"]["Size"] = UDim2.new(0, 67, 0, 55);
G2L["6e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6e"]["Name"] = [[Icon]];
G2L["6e"]["Position"] = UDim2.new(0.0037, 0, 0, 0);


-- StarterGui.ScreenGui.MainFrame.Icon.UICorner
G2L["6f"] = Instance.new("UICorner", G2L["6e"]);



-- StarterGui.ScreenGui.MinimizeNotification
G2L["70"] = Instance.new("Frame", G2L["1"]);
G2L["70"]["BorderSizePixel"] = 0;
G2L["70"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["70"]["Size"] = UDim2.new(0, 208, 0, 67);
G2L["70"]["Position"] = UDim2.new(0.99754, 0, 0.86863, 0);
G2L["70"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["70"]["Name"] = [[MinimizeNotification]];


-- StarterGui.ScreenGui.MinimizeNotification.UICorner
G2L["71"] = Instance.new("UICorner", G2L["70"]);



-- StarterGui.ScreenGui.MinimizeNotification.Notification
G2L["72"] = Instance.new("TextLabel", G2L["70"]);
G2L["72"]["TextWrapped"] = true;
G2L["72"]["BorderSizePixel"] = 0;
G2L["72"]["TextSize"] = 14;
G2L["72"]["TextScaled"] = true;
G2L["72"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["72"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["72"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["72"]["Size"] = UDim2.new(0, 200, 0, 29);
G2L["72"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["72"]["Text"] = [[Notification]];
G2L["72"]["Name"] = [[Notification]];


-- StarterGui.ScreenGui.MinimizeNotification.Notification.UICorner
G2L["73"] = Instance.new("UICorner", G2L["72"]);



-- StarterGui.ScreenGui.MinimizeNotification.Message
G2L["74"] = Instance.new("TextLabel", G2L["70"]);
G2L["74"]["TextWrapped"] = true;
G2L["74"]["BorderSizePixel"] = 0;
G2L["74"]["TextSize"] = 14;
G2L["74"]["TextScaled"] = true;
G2L["74"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["74"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["74"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["74"]["Size"] = UDim2.new(0, 172, 0, 20);
G2L["74"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["74"]["Text"] = [[Initialized Script]];
G2L["74"]["Name"] = [[Message]];
G2L["74"]["Position"] = UDim2.new(0.07805, 0, 0.56716, 0);


-- StarterGui.ScreenGui.MinimizeNotification.Line
G2L["75"] = Instance.new("TextLabel", G2L["70"]);
G2L["75"]["TextWrapped"] = true;
G2L["75"]["BorderSizePixel"] = 0;
G2L["75"]["TextSize"] = 14;
G2L["75"]["TextScaled"] = true;
G2L["75"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["75"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["75"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["75"]["BackgroundTransparency"] = 1;
G2L["75"]["Size"] = UDim2.new(0, 172, 0, 20);
G2L["75"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["75"]["Text"] = [[______________]];
G2L["75"]["Name"] = [[Line]];
G2L["75"]["Position"] = UDim2.new(0.06829, 0, 0.56716, 0);


-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end

G2L_MODULES[G2L["17"]] = {
Closure = function()
    local script = G2L["17"];local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local UIS = game:GetService("UserInputService")

local AimbotModule = {}

-- Settings
local AimbotEnabled = false
local TeamCheck = true
local Smoothing = 2
local MaxLockDistance = 150 -- Max pixels from mouse for lock

-- Drawing FOV Circle
local FOV_Circle = Drawing.new("Circle")
FOV_Circle.Thickness = 1
FOV_Circle.NumSides = 64
FOV_Circle.Radius = MaxLockDistance
FOV_Circle.Color = Color3.fromRGB(255, 255, 255)
FOV_Circle.Transparency = 0.5
FOV_Circle.Filled = false
FOV_Circle.Visible = false -- shown when aimbot is on

-- Toggle function
function AimbotModule.Toggle()
	AimbotEnabled = not AimbotEnabled
	FOV_Circle.Visible = AimbotEnabled
	return AimbotEnabled
end

function AimbotModule.IsEnabled()
	return AimbotEnabled
end

-- Get closest player to mouse
local function GetClosestPlayer()
	local LocalPlayer = Players.LocalPlayer
	local mousePos = UIS:GetMouseLocation()

	local closest, shortest = nil, math.huge

	for _, player in ipairs(Players:GetPlayers()) do
		if player == LocalPlayer or not player.Character then continue end
		if TeamCheck and player.Team == LocalPlayer.Team then continue end

		local head = player.Character:FindFirstChild("Head")
		if head then
			local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
			if onScreen then
				local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
				if distance < shortest and distance <= MaxLockDistance then
					shortest = distance
					closest = head
				end
			end
		end
	end

	return closest
end

-- Aimbot loop
RunService.RenderStepped:Connect(function()
	local mousePos = UIS:GetMouseLocation()
	FOV_Circle.Position = mousePos

	if not AimbotEnabled then return end

	local target = GetClosestPlayer()
	if target then
		Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Position)
	end
end)

return AimbotModule

end;
};
G2L_MODULES[G2L["51"]] = {
Closure = function()
    local script = G2L["51"];-- ESPModule inside the TextButton (uses BillboardGui + BoxHandleAdornment)
local ESPModule = {}
local players = game:GetService("Players")
local runService = game:GetService("RunService")

local espEnabled = false
local espObjects = {}

function createESP(player)
	if player == players.LocalPlayer then return end
	if espObjects[player] then return end

	local adornment = Instance.new("BoxHandleAdornment")
	adornment.Name = "ESPBox"
	adornment.Size = Vector3.new(4, 6, 4) -- Typical Humanoid size
	adornment.Color3 = Color3.fromRGB(191, 28, 255)
	adornment.Transparency = 0.5
	adornment.AlwaysOnTop = true
	adornment.ZIndex = 10
	adornment.Adornee = nil
	adornment.Visible = false
	adornment.Parent = workspace

	espObjects[player] = adornment
end

function removeESP(player)
	if espObjects[player] then
		espObjects[player]:Destroy()
		espObjects[player] = nil
	end
end

function updateESP()
	for player, adornment in pairs(espObjects) do
		local char = player.Character
		if char and char:FindFirstChild("HumanoidRootPart") then
			local hrp = char.HumanoidRootPart
			adornment.Adornee = hrp
			adornment.Visible = true
		else
			adornment.Visible = false
		end
	end
end

function ESPModule.Toggle()
	espEnabled = not espEnabled

	if espEnabled then
		for _, player in ipairs(players:GetPlayers()) do
			createESP(player)
		end

		runService:BindToRenderStep("UpdateESP", Enum.RenderPriority.Camera.Value + 1, updateESP)

		players.PlayerAdded:Connect(createESP)
		players.PlayerRemoving:Connect(removeESP)
	else
		runService:UnbindFromRenderStep("UpdateESP")
		for _, adornment in pairs(espObjects) do
			adornment:Destroy()
		end
		espObjects = {}
	end
end

return ESPModule

end;
};
-- StarterGui.ScreenGui.MainFrame.DragScript
local function C_5()
local script = G2L["5"];
	local UIS = game:GetService("UserInputService")
	local frame = script.Parent
	local dragging = false
	local dragInput, dragStart, startPos
	
	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
	
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	
	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)
	
	UIS.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local delta = input.Position - dragStart
			frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
				startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end;
task.spawn(C_5);
-- StarterGui.ScreenGui.MainFrame.Minimize.LocalScript
local function C_7()
local script = G2L["7"];
	local TS = game:GetService("TweenService")
	
	local panel = script.Parent.Parent -- The UI you're minimizing
	local notification = panel.Parent.MinimizeNotification
	
	-- UI slide-down (minimize) goal
	local goalDown = {
		Position = UDim2.new(0.347, 0, 1.2, 0) -- move off-screen downward
	}
	
	-- UI restore position
	local goalUp = {
		Position = UDim2.new(0.347, 0, 0.288, 0) -- center screen
	}
	
	-- Notification tween goals
	local notifyIn = {
		Position = UDim2.new(0.866, 0, 0.87, 0),
		Size = UDim2.new(0, 208, 0, 67)
	}
	
	local notifyOut = {
		Position = UDim2.new(1, 0, 0.869, 0)
	}
	
	-- Tween info
	local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	
	-- Create tweens
	local tweenDown = TS:Create(panel, tweenInfo, goalDown)
	local tweenUp = TS:Create(panel, tweenInfo, goalUp)
	local tweenNotifyIn = TS:Create(notification, tweenInfo, notifyIn)
	local tweenNotifyOut = TS:Create(notification, tweenInfo, notifyOut)
	
	-- Click event
	script.Parent.MouseButton1Click:Connect(function()
		tweenDown:Play()
		tweenDown.Completed:Wait()
		panel.Visible = false
	
		-- Show notification
		notification.Message.Text = "RightCtrl to toggle the UI back."
		tweenNotifyIn:Play()
		if script:FindFirstChild("notification") then
			script.notification:Play()
		end
	
		wait(5)
		tweenNotifyOut:Play()
	end)
end;
task.spawn(C_7);
-- StarterGui.ScreenGui.MainFrame.RightCtrlToOpenUI
local function C_9()
local script = G2L["9"];
	local UIS = game:GetService("UserInputService")
	local TS = game:GetService("TweenService")
	
	local goal = {
		Position = UDim2.new(0.347, 0, 0.288, 0)
	}
	
	local Tweeninfo = TweenInfo.new(
		0.5,
		Enum.EasingStyle.Quad,
		Enum.EasingDirection.In
	)
	
	local gui = script.Parent
	
	UIS.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.RightControl then
			-- Only open if not visible
			if not gui.Visible then
				gui.Position = UDim2.new(0.328, 0, 0.976, 0)
				gui.Visible = true
				local tween = TS:Create(gui, Tweeninfo, goal)
				tween:Play()
			end
		end
	end)
end;
task.spawn(C_9);
-- StarterGui.ScreenGui.MainFrame.MainTabButton.LocalScript
local function C_c()
local script = G2L["c"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.MainTab.Visible = not script.Parent.Parent.MainTab.Visible
	end)
end;
task.spawn(C_c);
-- StarterGui.ScreenGui.MainFrame.MainTab.Aimbot.LocalScript
local function C_15()
local script = G2L["15"];
	local UIS = game:GetService("UserInputService")
	local Aimbot = require(script.Parent.AimbotModule)
	local Button = script.Parent
	
	local function UpdateText()
		Button.Text = Aimbot.IsEnabled() and "Aimbot ON" or "Aimbot OFF"
	end
	
	UIS.InputBegan:Connect(function(input, processed)
		if processed then return end
		if input.KeyCode == Enum.KeyCode.E then
			Aimbot.Toggle()
			UpdateText()
		end
	end)
	
	Button.MouseButton1Click:Connect(function()
		Aimbot.Toggle()
		UpdateText()
	end)
end;
task.spawn(C_15);
-- StarterGui.ScreenGui.MainFrame.MainTab.TriggerBot.LocalScript
local function C_1b()
local script = G2L["1b"];
	local button = script.Parent
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local Mouse = LocalPlayer:GetMouse()
	local RunService = game:GetService("RunService")
	local UIS = game:GetService("UserInputService")
	
	-- Toggle variable
	local triggerEnabled = false
	
	-- Function to check if two players are on the same team
	local function areTeammates(player1, player2)
		-- Check if either player doesn't have a team (neutral)
		if not player1.Team or not player2.Team then
			return false
		end
		return player1.Team == player2.Team
	end
	
	-- Function to find the closest valid target under the mouse
	local function getTargetUnderMouse()
		local target = Mouse.Target
		if target and target.Parent then
			local character = target:FindFirstAncestorOfClass("Model")
			if character then
				local humanoid = character:FindFirstChild("Humanoid")
				local player = Players:GetPlayerFromCharacter(character)
	
				-- Check if it's a valid target (has humanoid, not local player, not teammate)
				if humanoid and character ~= LocalPlayer.Character and player then
					if not areTeammates(LocalPlayer, player) then
						return humanoid
					end
				end
			end
		end
		return nil
	end
	
	-- Trigger loop
	RunService.RenderStepped:Connect(function()
		if triggerEnabled then
			local target = getTargetUnderMouse()
			if target then
				mouse1press()
				wait()
				mouse1release()
			end
		end
	end)
	
	-- Toggle trigger bot when button is clicked
	button.MouseButton1Click:Connect(function()
		triggerEnabled = not triggerEnabled
		button.Text = triggerEnabled and "TriggerBot: ON" or "TriggerBot: OFF"
	end)
end;
task.spawn(C_1b);
-- StarterGui.ScreenGui.MainFrame.MainTab.SpinBot.LocalScript
local function C_1f()
local script = G2L["1f"];
	-- Setup
	local button = script.Parent
	local lplr = game.Players.LocalPlayer
	local rotating = false
	local rotspeed = 25
	
	-- Toggle Function
	button.Text = "Rotation: OFF"
	
	button.MouseButton1Click:Connect(function()
		rotating = not rotating
		button.Text = rotating and "Rotation: ON" or "Rotation: OFF"
	end)
	
	-- Rotation Loop
	task.spawn(function()
		while true do
			task.wait()
			if rotating and lplr.Character and lplr.Character:FindFirstChild("HumanoidRootPart") then
				local root = lplr.Character.HumanoidRootPart
				root.CFrame = root.CFrame * CFrame.Angles(0, math.rad(rotspeed % 150), 0)
			end
		end
	end)
end;
task.spawn(C_1f);
-- StarterGui.ScreenGui.MainFrame.MainTab.Bhop.LocalScript
local function C_23()
local script = G2L["23"];
	-- Setup
	local button = script.Parent
	local lplr = game.Players.LocalPlayer
	local UserInputService = game:GetService("UserInputService")
	local RunService = game:GetService("RunService")
	
	-- Configuration
	local bhopping = false
	local jumpPower = 50
	local baseWalkSpeed = 16
	local bhopWalkSpeed = 32
	local strafePower = 1.5 -- How much you can turn in air
	local maxAirAcceleration = 50 -- How quickly you can change direction in air
	
	-- Toggle Function
	button.Text = "BHop: OFF"
	
	button.MouseButton1Click:Connect(function()
		bhopping = not bhopping
		button.Text = bhopping and "BHop: ON" or "BHop: OFF"
	
		-- Reset walk speed when toggling off
		if not bhopping and lplr.Character then
			local humanoid = lplr.Character:FindFirstChildOfClass("Humanoid")
			if humanoid then
				humanoid.WalkSpeed = baseWalkSpeed
			end
		end
	end)
	
	-- Movement Variables
	local moveDirection = Vector3.new()
	local isJumping = false
	local lastJumpTime = 0
	
	-- Input Detection
	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if not bhopping or gameProcessed then return end
	
		-- Detect movement keys for strafing
		if input.KeyCode == Enum.KeyCode.A or input.KeyCode == Enum.KeyCode.Left then
			moveDirection = moveDirection - Vector3.new(1, 0, 0)
		elseif input.KeyCode == Enum.KeyCode.D or input.KeyCode == Enum.KeyCode.Right then
			moveDirection = moveDirection + Vector3.new(1, 0, 0)
		elseif input.KeyCode == Enum.KeyCode.W or input.KeyCode == Enum.KeyCode.Up then
			moveDirection = moveDirection + Vector3.new(0, 0, 1)
		elseif input.KeyCode == Enum.KeyCode.S or input.KeyCode == Enum.KeyCode.Down then
			moveDirection = moveDirection - Vector3.new(0, 0, 1)
		end
	end)
	
	UserInputService.InputEnded:Connect(function(input, gameProcessed)
		if not bhopping or gameProcessed then return end
	
		-- Reset movement keys
		if input.KeyCode == Enum.KeyCode.A or input.KeyCode == Enum.KeyCode.Left then
			moveDirection = moveDirection + Vector3.new(1, 0, 0)
		elseif input.KeyCode == Enum.KeyCode.D or input.KeyCode == Enum.KeyCode.Right then
			moveDirection = moveDirection - Vector3.new(1, 0, 0)
		elseif input.KeyCode == Enum.KeyCode.W or input.KeyCode == Enum.KeyCode.Up then
			moveDirection = moveDirection - Vector3.new(0, 0, 1)
		elseif input.KeyCode == Enum.KeyCode.S or input.KeyCode == Enum.KeyCode.Down then
			moveDirection = moveDirection + Vector3.new(0, 0, 1)
		end
	end)
	
	-- Main BHop Loop
	RunService.Heartbeat:Connect(function(delta)
		if not bhopping or not lplr.Character then return end
	
		local humanoid = lplr.Character:FindFirstChildOfClass("Humanoid")
		local rootPart = lplr.Character:FindFirstChild("HumanoidRootPart")
	
		if not humanoid or not rootPart then return end
	
		-- Auto-jump when on ground
		if humanoid.FloorMaterial ~= Enum.Material.Air and os.clock() - lastJumpTime > 0.1 then
			humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			isJumping = true
			lastJumpTime = os.clock()
			humanoid.WalkSpeed = bhopWalkSpeed
		else
			isJumping = humanoid:GetState() == Enum.HumanoidStateType.Jumping
		end
	
		-- Air strafing
		if isJumping and moveDirection.Magnitude > 0 then
			-- Get camera direction (for first-person strafing)
			local camera = workspace.CurrentCamera
			local cameraCFrame = camera.CFrame
			local flatLookVector = Vector3.new(cameraCFrame.LookVector.X, 0, cameraCFrame.LookVector.Z).Unit
	
			-- Calculate movement direction relative to camera
			local moveDir = (flatLookVector * moveDirection.Z) + (cameraCFrame.RightVector * moveDirection.X)
			moveDir = moveDir.Unit
	
			-- Apply air strafing force
			local currentVelocity = rootPart.Velocity
			local desiredVelocity = moveDir * bhopWalkSpeed
			desiredVelocity = Vector3.new(desiredVelocity.X, currentVelocity.Y, desiredVelocity.Z)
	
			-- Smooth acceleration
			local newVelocity = currentVelocity:Lerp(desiredVelocity, delta * maxAirAcceleration)
			rootPart.Velocity = Vector3.new(newVelocity.X, currentVelocity.Y, newVelocity.Z)
	
			-- Optional: Smooth rotation toward movement direction
			if moveDir.Magnitude > 0.1 then
				local targetCFrame = CFrame.new(rootPart.Position, rootPart.Position + moveDir)
				rootPart.CFrame = rootPart.CFrame:Lerp(targetCFrame, delta * strafePower)
			end
		end
	end)
end;
task.spawn(C_23);
-- StarterGui.ScreenGui.MainFrame.PlayerTab.Infinite Jump.LocalScript
local function C_2b()
local script = G2L["2b"];
	-- LocalScript inside the TextButton
	local button = script.Parent
	local UIS = game:GetService("UserInputService")
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	local humanoid
	
	local enabled = false
	
	-- Toggle infinite jump
	local function toggleJump()
		enabled = not enabled
		button.Text = enabled and "Infinite Jump: ON" or "Infinite Jump: OFF"
	end
	
	-- Handle jump input
	UIS.JumpRequest:Connect(function()
		if enabled then
			humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
			if humanoid then
				humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			end
		end
	end)
	
	-- Button click toggles
	button.MouseButton1Click:Connect(toggleJump)
	
	-- Optional: set default text
	button.Text = "Infinite Jump: OFF"
end;
task.spawn(C_2b);
-- StarterGui.ScreenGui.MainFrame.PlayerTab.Fly.LocalScript
local function C_2f()
local script = G2L["2f"];
	-- LocalScript inside the TextButton
	local button = script.Parent
	local UIS = game:GetService("UserInputService")
	local RunService = game:GetService("RunService")
	local player = game:GetService("Players").LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local rootPart = character:WaitForChild("HumanoidRootPart")
	
	local flying = false
	local bv -- BodyVelocity
	local speed = 60
	local flyConnection
	
	local directions = {
		forward = false,
		backward = false,
		left = false,
		right = false,
		up = false,
		down = false,
	}
	
	-- Define toggleFly before it's used
	local function toggleFly()
		flying = not flying
		button.Text = flying and "Fly: ON" or "Fly: OFF"
	
		if flying then
			character = player.Character or player.CharacterAdded:Wait()
			rootPart = character:WaitForChild("HumanoidRootPart")
	
			bv = Instance.new("BodyVelocity")
			bv.MaxForce = Vector3.new(1e5, 1e5, 1e5)
			bv.Velocity = Vector3.zero
			bv.Parent = rootPart
	
			flyConnection = RunService.RenderStepped:Connect(function()
				local cam = workspace.CurrentCamera
				local moveVec = Vector3.zero
	
				if directions.forward then moveVec += cam.CFrame.LookVector end
				if directions.backward then moveVec -= cam.CFrame.LookVector end
				if directions.right then moveVec += cam.CFrame.RightVector end
				if directions.left then moveVec -= cam.CFrame.RightVector end
				if directions.up then moveVec += cam.CFrame.UpVector end
				if directions.down then moveVec -= cam.CFrame.UpVector end
	
				bv.Velocity = moveVec.Unit * speed
				if moveVec.Magnitude == 0 then
					bv.Velocity = Vector3.zero
				end
			end)
		else
			if flyConnection then flyConnection:Disconnect() end
			if bv then bv:Destroy() end
		end
	end
	
	-- Update movement keys
	UIS.InputBegan:Connect(function(input, gpe)
		if gpe then return end
	
		-- Movement controls
		if input.KeyCode == Enum.KeyCode.W then directions.forward = true end
		if input.KeyCode == Enum.KeyCode.S then directions.backward = true end
		if input.KeyCode == Enum.KeyCode.A then directions.left = true end
		if input.KeyCode == Enum.KeyCode.D then directions.right = true end
		if input.KeyCode == Enum.KeyCode.Space then directions.up = true end
		if input.KeyCode == Enum.KeyCode.LeftShift then directions.down = true end
	
		-- Toggle fly with F key
		if input.KeyCode == Enum.KeyCode.F then
			toggleFly()
		end
	end)
	
	UIS.InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.W then directions.forward = false end
		if input.KeyCode == Enum.KeyCode.S then directions.backward = false end
		if input.KeyCode == Enum.KeyCode.A then directions.left = false end
		if input.KeyCode == Enum.KeyCode.D then directions.right = false end
		if input.KeyCode == Enum.KeyCode.Space then directions.up = false end
		if input.KeyCode == Enum.KeyCode.LeftShift then directions.down = false end
	end)
	
	-- Hook button
	button.MouseButton1Click:Connect(toggleFly)
	
	-- Optional default label
	button.Text = "Fly: OFF"
end;
task.spawn(C_2f);
-- StarterGui.ScreenGui.MainFrame.PlayerTab.NoClip.LocalScript
local function C_33()
local script = G2L["33"];
	local button = script.Parent
	local RunService = game:GetService("RunService")
	local NoClipActive = false
	local NoClipConnection
	
	button.MouseButton1Click:Connect(function()
		NoClipActive = not NoClipActive
		button.Text = NoClipActive and "NoClip: ON" or "NoClip: OFF"
	
		if NoClipActive then
			NoClipConnection = RunService.Stepped:Connect(function()
				local character = game.Players.LocalPlayer.Character
				if character then
					for _, part in pairs(character:GetDescendants()) do
						if part:IsA("BasePart") then
							part.CanCollide = false
						end
					end
				end
			end)
		else
			if NoClipConnection then
				NoClipConnection:Disconnect()
			end
		end
	end)
end;
task.spawn(C_33);
-- StarterGui.ScreenGui.MainFrame.PlayerTab.TeleportFrame.LocalScript
local function C_3f()
local script = G2L["3f"];
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	
	local frame = script.Parent
	local playerList = frame.PlayerList
	local teleportBtn = frame.TeleportButton
	local template = playerList.TemplateButton
	
	local selectedPlayer = nil
	
	-- Populate the list
	local function refreshList()
		for _, child in ipairs(playerList:GetChildren()) do
			if child:IsA("TextButton") and child.Name ~= "TemplateButton" then
				child:Destroy()
			end
		end
	
		for _, player in ipairs(Players:GetPlayers()) do
			if player ~= LocalPlayer then
				local button = template:Clone()
				button.Visible = true
				button.Text = player.Name
				button.Name = player.Name
				button.Parent = playerList
	
				button.MouseButton1Click:Connect(function()
					selectedPlayer = player
					for _, btn in ipairs(playerList:GetChildren()) do
						if btn:IsA("TextButton") and btn ~= template then
							btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
						end
					end
					button.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
				end)
			end
		end
	end
	
	-- Refresh on start and when players join/leave
	refreshList()
	Players.PlayerAdded:Connect(refreshList)
	Players.PlayerRemoving:Connect(refreshList)
	
	-- Teleport to selected player
	teleportBtn.MouseButton1Click:Connect(function()
		if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
			local myRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
			if myRoot then
				myRoot.CFrame = selectedPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(3, 0, 0)
			end
		end
	end)
end;
task.spawn(C_3f);
-- StarterGui.ScreenGui.MainFrame.PlayerTab.WalkSpeedFrame.TextBox.LocalScript
local function C_48()
local script = G2L["48"];
	local function UpdateWalkspeed()
		local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.Character:Wait()
		char.Humanoid.WalkSpeed = script.Parent.Text
		script.Parent.Parent.TextLabel2.Text = "WalkSpeed: "..char.Humanoid.WalkSpeed
	end
	
	script.Parent.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			UpdateWalkspeed()
		end
	end)
end;
task.spawn(C_48);
-- StarterGui.ScreenGui.MainFrame.VisualsTab.Esp.LocalScript
local function C_50()
local script = G2L["50"];
	-- LocalScript inside the TextButton
	local button = script.Parent
	local ESPModule = require(button:WaitForChild("ESPModule"))
	local UserInputService = game:GetService("UserInputService")
	
	-- State tracker
	local isESPEnabled = false
	
	-- Toggle function
	local function toggleESP()
		isESPEnabled = not isESPEnabled
		ESPModule.Toggle()
	end
	
	-- When button is clicked
	button.MouseButton1Click:Connect(toggleESP)
	
	-- When T key is pressed
	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.T then
			toggleESP()
		end
	end)
end;
task.spawn(C_50);
-- StarterGui.ScreenGui.MainFrame.VisualsTab.Tracers.LocalScript
local function C_55()
local script = G2L["55"];
	local button = script.Parent
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local LocalPlayer = Players.LocalPlayer
	
	local tracersEnabled = false
	local tracerLines = {}
	
	-- Create tracer line
	local function createTracer()
		local line = Drawing.new("Line")
		line.Color = Color3.fromRGB(252, 250, 255)
		line.Thickness = 2
		line.Transparency = 1
		line.Visible = false
		return line
	end
	
	-- Clear and remove all tracers
	local function clearTracers()
		for _, line in pairs(tracerLines) do
			line.Visible = false
			line:Remove()
		end
		table.clear(tracerLines)
	end
	
	-- Remove tracer for a specific player safely
	local function removeTracer(player)
		if tracerLines[player] then
			tracerLines[player].Visible = false
			tracerLines[player]:Remove()
			tracerLines[player] = nil
		end
	end
	
	-- Update tracers each frame
	local function updateTracers()
		local camera = workspace.CurrentCamera
		if not camera then return end
		local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
	
		for _, player in pairs(Players:GetPlayers()) do
			if player ~= LocalPlayer then
				local char = player.Character
				local head = char and char:FindFirstChild("Head")
	
				local line = tracerLines[player]
	
				if head and line then
					local pos, onScreen = camera:WorldToViewportPoint(head.Position)
					if onScreen then
						line.From = screenCenter
						line.To = Vector2.new(pos.X, pos.Y)
						line.Visible = true
					else
						line.Visible = false
					end
				elseif line then
					-- If no head, hide the line
					line.Visible = false
				end
			end
		end
	end
	
	-- Handle player leaving to clean tracers
	Players.PlayerRemoving:Connect(function(player)
		removeTracer(player)
	end)
	
	-- Button toggle
	button.MouseButton1Click:Connect(function()
		tracersEnabled = not tracersEnabled
		button.Text = tracersEnabled and "Tracers: ON" or "Tracers: OFF"
	
		if tracersEnabled then
			-- Create tracers for existing players
			for _, player in ipairs(Players:GetPlayers()) do
				if player ~= LocalPlayer and not tracerLines[player] then
					tracerLines[player] = createTracer()
				end
			end
	
			RunService:BindToRenderStep("TracerUpdate", Enum.RenderPriority.Camera.Value + 1, updateTracers)
		else
			RunService:UnbindFromRenderStep("TracerUpdate")
			clearTracers()
		end
	end)
end;
task.spawn(C_55);
-- StarterGui.ScreenGui.MainFrame.VisualsTab.Chams.LocalScript
local function C_59()
local script = G2L["59"];
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local RunService = game:GetService("RunService")
	
	-- Chams settings
	local ChamsAdjustments = {
		Enabled = false,
		OutlineColor = Color3.fromRGB(255, 255, 255),
		OutlineTransparency = 0,
		FillColor = Color3.fromRGB(120, 255, 0),
		FillTransparency = 0,
	}
	
	-- Add Chams
	local function AddChams(player)
		if player and player.Character and not player.Character:FindFirstChild(player.Name.."_Chams") then
			local ChamsESP = Instance.new("Highlight")
			ChamsESP.Name = player.Name.."_Chams"
			ChamsESP.Adornee = player.Character
			ChamsESP.OutlineColor = ChamsAdjustments.OutlineColor
			ChamsESP.OutlineTransparency = ChamsAdjustments.OutlineTransparency
			ChamsESP.FillColor = ChamsAdjustments.FillColor
			ChamsESP.FillTransparency = ChamsAdjustments.FillTransparency
			ChamsESP.Enabled = ChamsAdjustments.Enabled
			ChamsESP.Parent = player.Character
		end
	end
	
	-- Update Chams
	local function UpdateChams(player)
		local cham = player.Character and player.Character:FindFirstChild(player.Name.."_Chams")
		if cham then
			cham.Enabled = ChamsAdjustments.Enabled
			cham.OutlineColor = ChamsAdjustments.OutlineColor
			cham.OutlineTransparency = ChamsAdjustments.OutlineTransparency
			cham.FillColor = ChamsAdjustments.FillColor
			cham.FillTransparency = ChamsAdjustments.FillTransparency
		end
	end
	
	-- Remove Chams
	local function RemoveChams(player)
		local cham = player.Character and player.Character:FindFirstChild(player.Name.."_Chams")
		if cham then cham:Destroy() end
	end
	
	-- Auto apply on spawn
	local function SetupCharacterHooks(player)
		player.CharacterAdded:Connect(function()
			task.wait(0.1)
			if ChamsAdjustments.Enabled then
				AddChams(player)
			end
		end)
	end
	
	-- Hook all players
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			SetupCharacterHooks(player)
		end
	end
	
	Players.PlayerAdded:Connect(function(player)
		if player ~= LocalPlayer then
			SetupCharacterHooks(player)
		end
	end)
	
	-- Stepped update loop
	RunService.Stepped:Connect(function()
		for _, player in pairs(Players:GetPlayers()) do
			if player ~= LocalPlayer and player.Character then
				if ChamsAdjustments.Enabled then
					if not player.Character:FindFirstChild(player.Name.."_Chams") then
						AddChams(player)
					else
						UpdateChams(player)
					end
				else
					RemoveChams(player)
				end
			end
		end
	end)
	
	-- 👇 Chams toggle when button is clicked
	script.Parent.MouseButton1Click:Connect(function()
		ChamsAdjustments.Enabled = not ChamsAdjustments.Enabled
		script.Parent.Text = ChamsAdjustments.Enabled and "Chams: ON" or "Chams: OFF"
	end)
end;
task.spawn(C_59);
-- StarterGui.ScreenGui.MainFrame.PlayerTabButton.LocalScript
local function C_5c()
local script = G2L["5c"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.PlayerTab.Visible = not script.Parent.Parent.PlayerTab.Visible
	end)
end;
task.spawn(C_5c);
-- StarterGui.ScreenGui.MainFrame.VisualsTabButton.LocalScript
local function C_60()
local script = G2L["60"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.VisualsTab.Visible = not script.Parent.Parent.VisualsTab.Visible
	end)
end;
task.spawn(C_60);
-- StarterGui.ScreenGui.MainFrame.SettingsTabButton.LocalScript
local function C_64()
local script = G2L["64"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.SettingsTab.Visible = not script.Parent.Parent.SettingsTab.Visible
	end)
end;
task.spawn(C_64);
-- StarterGui.ScreenGui.MainFrame.SettingsTab.Theme.LocalScript
local function C_6c()
local script = G2L["6c"];
	-- StarterGui.ScreenGui.MainFrame.SettingsTab.Theme.LocalScript
	local function C_60()
		local button = script.Parent
		local UIS = game:GetService("UserInputService")
	
		-- Define available themes
		local themes = {
			["Default"] = {
				MainColor = Color3.fromRGB(0, 0, 0),
				AccentColor = Color3.fromRGB(255, 255, 255),
				TextColor = Color3.fromRGB(255, 255, 255)
			},
			["Dark Purple"] = {
				MainColor = Color3.fromRGB(20, 0, 40),
				AccentColor = Color3.fromRGB(191, 28, 255),
				TextColor = Color3.fromRGB(255, 255, 255)
			},
			["Cyberpunk"] = {
				MainColor = Color3.fromRGB(10, 2, 20),
				AccentColor = Color3.fromRGB(255, 0, 170),
				TextColor = Color3.fromRGB(0, 255, 255)
			},
			["Ocean"] = {
				MainColor = Color3.fromRGB(0, 20, 40),
				AccentColor = Color3.fromRGB(0, 150, 255),
				TextColor = Color3.fromRGB(200, 240, 255)
			},
			["Forest"] = {
				MainColor = Color3.fromRGB(10, 30, 10),
				AccentColor = Color3.fromRGB(50, 200, 50),
				TextColor = Color3.fromRGB(220, 255, 220)
			},
			["Gray(kinda bad)"] = {
				MainColor = Color3.fromRGB(84, 84, 84),
				AccentColor = Color3.fromRGB(71, 71, 71),
				TextColor = Color3.fromRGB(109, 109, 109)
			},
			["Cyan"] = {
				MainColor = Color3.fromRGB(13, 183, 195),
				AccentColor = Color3.fromRGB(12, 173, 181),
				TextColor = Color3.fromRGB(14, 202, 209)
			},
			["P#rnhub"] = {
				MainColor = Color3.fromRGB(255, 200, 0),
				AccentColor = Color3.fromRGB(0, 0, 0),
				TextColor = Color3.fromRGB(255, 151, 6)
			}
		}
	
		local currentTheme = "Default"
		local themeSelectionActive = false
	
		-- Apply a theme to the UI
		local function applyTheme(themeName)
			currentTheme = themeName
			local theme = themes[themeName]
	
			-- Main UI elements
			local mainFrame = script.Parent.Parent.Parent
			mainFrame.BackgroundColor3 = theme.MainColor
	
			-- Apply to all UIStroke elements
			for _, descendant in ipairs(mainFrame:GetDescendants()) do
				if descendant:IsA("UIStroke") then
					descendant.Color = theme.AccentColor
				end
	
				-- Apply text color to buttons and labels
				if (descendant:IsA("TextButton") or descendant:IsA("TextLabel")) and descendant.Name ~= "Message" then
					descendant.TextColor3 = theme.TextColor
				end
			end
	
			-- Update notification colors
			local notifications = {
				mainFrame.Parent.MinimizeNotification,
			}
	
			for _, notification in ipairs(notifications) do
				notification.BackgroundColor3 = theme.MainColor
				notification.Message.BackgroundColor3 = theme.MainColor
				notification.Notification.TextColor3 = theme.TextColor
				notification.Message.TextColor3 = theme.TextColor
			end
		end
	
		-- Create theme selection UI
		local function createThemeSelectionUI()
			local themeFrame = Instance.new("ScrollingFrame")
			themeFrame.ScrollBarThickness = 2.5
			themeFrame.Name = "ThemeSelection"
			themeFrame.Size = UDim2.new(0, 300, 0, 250)
			themeFrame.Position = UDim2.new(0.5, -150, 0.5, -125)
			themeFrame.BackgroundColor3 = themes[currentTheme].MainColor
			themeFrame.BorderSizePixel = 0
			themeFrame.ZIndex = 10
	
			local title = Instance.new("TextLabel")
			title.Text = "Select a Theme"
			title.Size = UDim2.new(1, 0, 0, 30)
			title.BackgroundTransparency = 1
			title.TextColor3 = themes[currentTheme].TextColor
			title.Font = Enum.Font.SourceSansBold
			title.TextSize = 18
			title.Parent = themeFrame
	
			local UICorner = Instance.new("UICorner")
			UICorner.CornerRadius = UDim.new(0, 8)
			UICorner.Parent = themeFrame
	
			local UIStroke = Instance.new("UIStroke")
			UIStroke.Color = themes[currentTheme].AccentColor
			UIStroke.Thickness = 2
			UIStroke.Parent = themeFrame
	
			local closeButton = Instance.new("TextButton")
			closeButton.Text = "X"
			closeButton.Size = UDim2.new(0, 30, 0, 30)
			closeButton.Position = UDim2.new(1, -30, 0, 0)
			closeButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
			closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
			closeButton.Font = Enum.Font.SourceSansBold
			closeButton.TextSize = 18
			closeButton.Parent = themeFrame
			local uicorner = Instance.new("UICorner", closeButton)
			uicorner.Name = "UICorner"
	
			local buttonContainer = Instance.new("Frame")
			buttonContainer.Size = UDim2.new(1, -20, 1, -70)
			buttonContainer.Position = UDim2.new(0, 10, 0, 40)
			buttonContainer.BackgroundTransparency = 1
			buttonContainer.Parent = themeFrame
	
			local UIListLayout = Instance.new("UIListLayout")
			UIListLayout.Padding = UDim.new(0, 10)
			UIListLayout.Parent = buttonContainer
			
			local uicorner = Instance.new("UICorner", buttonContainer)
			uicorner.Name = "UICorner"
	
			-- Create theme preview buttons
			for themeName, themeData in pairs(themes) do
				local themeButton = Instance.new("TextButton")
				themeButton.Size = UDim2.new(1, 0, 0, 40)
				themeButton.Text = themeName
				themeButton.Name = themeName
				themeButton.BackgroundColor3 = themeData.MainColor
				themeButton.TextColor3 = themeData.TextColor
				themeButton.Font = Enum.Font.SourceSansBold
				themeButton.TextSize = 16
				themeButton.Parent = buttonContainer
				
				local uicorner = Instance.new("UICorner", themeButton)
				uicorner.Name = "UICorner"
	
				local themeSample = Instance.new("Frame")
				themeSample.Size = UDim2.new(0, 20, 0, 20)
				themeSample.Position = UDim2.new(1, -30, 0.5, -10)
				themeSample.BackgroundColor3 = themeData.AccentColor
				themeSample.BorderSizePixel = 0
				themeSample.Parent = themeButton
	
				local UICorner = Instance.new("UICorner")
				UICorner.CornerRadius = UDim.new(0, 4)
				UICorner.Parent = themeButton
	
				local UIStroke = Instance.new("UIStroke")
				UIStroke.Color = themeData.AccentColor
				UIStroke.Thickness = 2
				UIStroke.Parent = themeButton
	
				themeButton.MouseButton1Click:Connect(function()
					applyTheme(themeName)
					themeFrame:Destroy()
					themeSelectionActive = false
				end)
			end
	
			-- Close button functionality
			closeButton.MouseButton1Click:Connect(function()
				themeFrame:Destroy()
				themeSelectionActive = false
			end)
	
			return themeFrame
		end
	
		-- Button click to open theme selection
		button.MouseButton1Click:Connect(function()
			if not themeSelectionActive then
				themeSelectionActive = true
				local themeUI = createThemeSelectionUI()
				themeUI.Parent = script.Parent.Parent
			end
		end)
	
		-- Apply default theme on start
		applyTheme(currentTheme)
	end;
	task.spawn(C_60);
end;
task.spawn(C_6c);

return G2L["1"], require;
